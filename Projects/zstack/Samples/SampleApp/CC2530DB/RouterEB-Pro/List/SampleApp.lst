###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         24/Aug/2018  09:45:41 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee_sim\Projects\zstack\Samples\SampleApp\So #
#                          urce\SampleApp.c                                   #
#    Command line       =  -f D:\zigbee_sim\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg    #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK         #
#                          -DBLINK_LEDS) -f D:\zigbee_sim\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8 #
#                          wConfig.cfg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\zigbee_sim\Projects\zstack\Samples\SampleApp\So #
#                          urce\SampleApp.c -D ZIGBEEPRO -D ZTOOL_P1 -D       #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC D:\zigbee_sim\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\  #
#                          -lA D:\zigbee_sim\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\RouterEB-Pro\List\ --diag_suppress      #
#                          Pe001,Pa010 -o D:\zigbee_sim\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\RouterEB-Pro\Obj\ -e         #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\zigbee_sim\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\ -I D:\zigbee_sim\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\SOURCE\ -I                 #
#                          D:\zigbee_sim\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\ZMAIN\TI2530DB\ -I                 #
#                          D:\zigbee_sim\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\MT\ -I            #
#                          D:\zigbee_sim\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I   #
#                          D:\zigbee_sim\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530 #
#                          EB\ -I D:\zigbee_sim\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\C #
#                          CSOC\ -I D:\zigbee_sim\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\ -I D:\zigbee_sim\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \ -I D:\zigbee_sim\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\   #
#                          -I D:\zigbee_sim\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I  #
#                          D:\zigbee_sim\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I    #
#                          D:\zigbee_sim\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I     #
#                          D:\zigbee_sim\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I     #
#                          D:\zigbee_sim\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I      #
#                          D:\zigbee_sim\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I          #
#                          D:\zigbee_sim\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\   #
#                          -I D:\zigbee_sim\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA #
#                          \ -I D:\zigbee_sim\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ #
#                           -I D:\zigbee_sim\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVE #
#                          L\ -I D:\zigbee_sim\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEV #
#                          EL\srf04\ -I D:\zigbee_sim\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\ #
#                          LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz                  #
#                          --require_prototypes                               #
#    List file          =  D:\zigbee_sim\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\RouterEB-Pro\List\SampleApp.lst             #
#    Object file        =  D:\zigbee_sim\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\RouterEB-Pro\Obj\SampleApp.r51              #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee_sim\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /*********************************************************************
      2            Key control:
      3              SW1:  Sends a flash command to all devices in Group 1.
      4              SW2:  Adds/Removes (toggles) this device in and out
      5                    of Group 1.  This will enable and disable the
      6                    reception of the flash command.
      7          *********************************************************************/
      8          
      9          /**
     10           * INCLUDES
     11           */
     12          #include "OSAL.h"
     13          #include "ZGlobals.h"
     14          #include "AF.h"
     15          #include "aps_groups.h"
     16          #include "ZDApp.h"
     17          #include "SampleApp.h"
     18          #include "SampleAppHw.h"
     19          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     20          
     21          /* HAL */
     22          #include "hal_lcd.h"
     23          #include "hal_led.h"
     24          #include "hal_key.h"
     25          #include "MT_UART.h"  //串口头文件引用 
     26          #include "MT_APP.h"
     27          #include "MT.h"
     28          /**  sensor  **/
     29          #include "DHT11.h"//DH11模块
     30          #include "ds18b20.h"//DS18B20模块
     31          #include "BH1750.h"
     32          
     33          /*********************************************************************
     34           * GLOBAL VARIABLES
     35           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     36            uchar sendSign = 1;
   \                     sendSign:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for sendSign>`
   \   000001                REQUIRE __INIT_XDATA_I
     37          
     38          
     39          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     40          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     41          {
     42            SAMPLEAPP_PERIODIC_CLUSTERID,
     43            SAMPLEAPP_FLASH_CLUSTERID
     44          };
     45          

   \                                 In  segment XDATA_ROM_C, align 1
     46          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
     47          {
     48            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     49            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     50            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     51            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     52            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     53            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     54            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     55            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     56            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     57          };
     58          
     59          // This is the Endpoint/Interface description.  It is defined here, but
     60          // filled-in in SampleApp_Init().  Another way to go would be to fill
     61          // in the structure here and make it a "const" (in code space).  The
     62          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     63          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     64          
     65          /*********************************************************************
     66           * EXTERNAL VARIABLES
     67           */
     68          
     69          /*********************************************************************
     70           * EXTERNAL FUNCTIONS
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL VARIABLES
     75           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     77                                    // This variable will be received when
     78                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     79          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     80          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     82          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          afAddrType_t SampleApp_Periodic_DstAddr; //广播
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     84          afAddrType_t SampleApp_Flash_DstAddr;    //组播
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          afAddrType_t SampleApp_P2P_DstAddr;      //点播
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     86          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
     88          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     91          
     92          /*********************************************************************
     93           * LOCAL FUNCTIONS
     94           */
     95          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
     96          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
     97          void SampleApp_SendPeriodicMessage( void );
     98          void SampleApp_SendFlashMessage( uint16 flashTime );
     99          void SampleApp_Send_P2P_Message(void);
    100          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg); 
    101          /*********************************************************************
    102           * NETWORK LAYER CALLBACKS
    103           */
    104          
    105          /*********************************************************************
    106           * PUBLIC FUNCTIONS
    107           */
    108          
    109          /*********************************************************************
    110           * @fn      SampleApp_Init
    111           *
    112           * @brief   Initialization function for the Generic App Task.
    113           *          This is called during initialization and should contain
    114           *          any application specific initialization (ie. hardware
    115           *          initialization/setup, table initialization, power up
    116           *          notificaiton ... ).
    117           *
    118           * @param   task_id - the ID assigned by OSAL.  This ID should be
    119           *                    used to send messages and set timers.
    120           *
    121           * @return  none
    122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    124          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    125            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    126            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    127            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    128            
    129            MT_UartInit();                  //串口初始化
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    130            MT_UartRegisterTaskID(task_id); //注册串口任务
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    131            //P0SEL &= 0x7f;                  //P0_7配置成通用io
    132            P0SEL &= 0x3f;   //P0_7和P0_6配置成通用io
   \   00001E   53F33F       ANL     0xf3,#0x3f
    133            // Device hardware initialization can be added here or in main() (Zmain.c).
    134            // If the hardware is application specific - add it here.
    135            // If the hardware is other parts of the device add it in main().
    136          
    137           #if defined ( BUILD_ALL_DEVICES )
    138            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    139            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    140            // together - if they are - we will start up a coordinator. Otherwise,
    141            // the device will start as a router.
    142            if ( readCoordinatorJumper() )
    143              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    144            else
    145              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    146          #endif // BUILD_ALL_DEVICES
    147          
    148          #if defined ( HOLD_AUTO_START )
    149            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    150            //  from starting the device and wait for the application to
    151            //  start the device.
    152            ZDOInitDevice(0);
    153          #endif
    154          
    155            // Setup for the periodic message's destination address
    156            // Broadcast to everyone  广播到每个人
    157            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000021   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000024   740F         MOV     A,#0xf
   \   000026   F0           MOVX    @DPTR,A
    158            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000027   A3           INC     DPTR
   \   000028   7414         MOV     A,#0x14
   \   00002A   F0           MOVX    @DPTR,A
    159            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00002E   74FF         MOV     A,#-0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
    160          
    161            // Setup for the flash command's destination address - Group 1
    162            //为flash命令的目标地址设置――第1组  组播设置
    163            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000033   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000036   7401         MOV     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
    164            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000039   A3           INC     DPTR
   \   00003A   7414         MOV     A,#0x14
   \   00003C   F0           MOVX    @DPTR,A
    165            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
    166            
    167            //点播设置
    168            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //点播 
   \   000046   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000049   7402         MOV     A,#0x2
   \   00004B   F0           MOVX    @DPTR,A
    169            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   00004C   A3           INC     DPTR
   \   00004D   7414         MOV     A,#0x14
   \   00004F   F0           MOVX    @DPTR,A
    170            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //发给协调器
   \   000050   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000053   E4           CLR     A
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   F0           MOVX    @DPTR,A
    171          
    172            // Fill out the endpoint description.
    173            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000057   90....       MOV     DPTR,#SampleApp_epDesc
   \   00005A   7414         MOV     A,#0x14
   \   00005C   F0           MOVX    @DPTR,A
    174            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00005D   A3           INC     DPTR
   \   00005E   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000064   F0           MOVX    @DPTR,A
    175            SampleApp_epDesc.simpleDesc
    176                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000065   A3           INC     DPTR
   \   000066   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00006C   F0           MOVX    @DPTR,A
    177            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00006D   A3           INC     DPTR
   \   00006E   E4           CLR     A
   \   00006F   F0           MOVX    @DPTR,A
    178          
    179            // Register the endpoint description with the AF
    180            afRegister( &SampleApp_epDesc );
   \   000070                ; Setup parameters for call to function afRegister
   \   000070   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000072   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000074   12....       LCALL   ??afRegister?relay
    181          
    182            // Register for all key events - This app will handle all key events
    183            RegisterForKeys( SampleApp_TaskID );
   \   000077                ; Setup parameters for call to function RegisterForKeys
   \   000077   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   ??RegisterForKeys?relay
    184          
    185            // By default, all devices start out in Group 1
    186            SampleApp_Group.ID = 0x0001;
   \   00007F   90....       MOV     DPTR,#SampleApp_Group
   \   000082   7401         MOV     A,#0x1
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
    187            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   000088                ; Setup parameters for call to function osal_memcpy
   \   000088   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008B   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00008E   F5..         MOV     ?V0 + 2,A
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000095   7C07         MOV     R4,#0x7
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009B   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00009D   12....       LCALL   ??osal_memcpy?relay
   \   0000A0   7403         MOV     A,#0x3
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
    188            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A5                ; Setup parameters for call to function aps_AddGroup
   \   0000A5   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000A7   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000A9   7914         MOV     R1,#0x14
   \   0000AB   12....       LCALL   ??aps_AddGroup?relay
    189          
    190          #if defined ( LCD_SUPPORTED )
    191            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000AE                ; Setup parameters for call to function HalLcdWriteString
   \   0000AE   7901         MOV     R1,#0x1
   \   0000B0   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B2   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B4   12....       LCALL   ??HalLcdWriteString?relay
    192          #endif
    193          }
   \   0000B7   7F03         MOV     R7,#0x3
   \   0000B9   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000BC                REQUIRE P0SEL
    194          
    195          /*********************************************************************
    196           * @fn      SampleApp_ProcessEvent
    197           *
    198           * @brief   Generic Application Task event processor.  This function
    199           *          is called to process all events for the task.  Events
    200           *          include timers, messages and any other user defined events.
    201           *
    202           * @param   task_id  - The OSAL assigned task ID.
    203           * @param   events - events to process.  This is a bit map and can
    204           *                   contain more than one event.
    205           *
    206           * @return  none
    207           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    208          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    209          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    210            afIncomingMSGPacket_t *MSGpkt;
    211            (void)task_id;  // Intentionally unreferenced parameter
    212          
    213            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    214            {
    215              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   800E         SJMP    ??SampleApp_ProcessEvent_1
    216              while ( MSGpkt )
    217              {
    218                switch ( MSGpkt->hdr.event )
    219                {
    220                  // Received when a key is pressed
    221                  case KEY_CHANGE:
    222                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    223                    break;
    224          
    225                  // Received when a messages is received (OTA) for this endpoint
    226                    //接收到此端点的消息（OTA）
    227                  case AF_INCOMING_MSG_CMD:
    228                    SampleApp_MessageMSGCB( MSGpkt );
    229                  break;
    230          
    231                  // Received whenever the device changes state in the network
    232                    //当设备在网络中改变状态时接收
    233                  case ZDO_STATE_CHANGE:
    234                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    235                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    236                           (SampleApp_NwkState == DEV_ROUTER)
    237                        || (SampleApp_NwkState == DEV_END_DEVICE) )
    238                    {
    239                      // Start sending the periodic message in a regular interval.
    240                      osal_start_timerEx( SampleApp_TaskID,
    241                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    242                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    243                    }
    244                    else
    245                    {
    246                      // Device is no longer in the network
    247                    }
    248                    break;
    249                  //串口收到数据后由MT_UART层传递过来的数据，用该方法接收，编译时不定义MT相关内容 
    250                  case CMD_SERIAL_MSG:  
    251                    SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);
   \                     ??SampleApp_ProcessEvent_2:
   \   000012                ; Setup parameters for call to function SampleApp_SerialCMD
   \   000012   AA..         MOV     R2,?V0 + 0
   \   000014   AB..         MOV     R3,?V0 + 1
   \   000016   12....       LCALL   ??SampleApp_SerialCMD?relay
    252                    break;
    253                  default:
    254                    break;
    255                }
    256          
    257                // Release the memory
    258                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000019                ; Setup parameters for call to function osal_msg_deallocate
   \   000019   AA..         MOV     R2,?V0 + 0
   \   00001B   AB..         MOV     R3,?V0 + 1
   \   00001D   12....       LCALL   ??osal_msg_deallocate?relay
    259          
    260                // Next - if one is available
    261                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000020                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000020   90....       MOV     DPTR,#SampleApp_TaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   ??osal_msg_receive?relay
   \   000028   8A..         MOV     ?V0 + 0,R2
   \   00002A   8B..         MOV     ?V0 + 1,R3
   \   00002C   E5..         MOV     A,?V0 + 0
   \   00002E   45..         ORL     A,?V0 + 1
   \   000030   6056         JZ      ??SampleApp_ProcessEvent_4
   \   000032   85..82       MOV     DPL,?V0 + 0
   \   000035   85..83       MOV     DPH,?V0 + 1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   14           DEC     A
   \   00003A   60D6         JZ      ??SampleApp_ProcessEvent_2
   \   00003C   24E7         ADD     A,#-0x19
   \   00003E   601E         JZ      ??SampleApp_ProcessEvent_5
   \   000040   245A         ADD     A,#0x5a
   \   000042   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000044   24EF         ADD     A,#-0x11
   \   000046   601F         JZ      ??SampleApp_ProcessEvent_7
   \   000048   80CF         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_6:
   \   00004A                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FA           MOV     R2,A
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00005C   80BB         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   00005E                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00005E   AA..         MOV     R2,?V0 + 0
   \   000060   AB..         MOV     R3,?V0 + 1
   \   000062   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000065   80B2         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_7:
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   90....       MOV     DPTR,#SampleApp_NwkState
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   6407         XRL     A,#0x7
   \   00006F   6005         JZ      ??SampleApp_ProcessEvent_8
   \   000071   E0           MOVX    A,@DPTR
   \   000072   6406         XRL     A,#0x6
   \   000074   70A3         JNZ     ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_8:
   \   000076                ; Setup parameters for call to function osal_start_timerEx
   \   000076   7C70         MOV     R4,#0x70
   \   000078   7D17         MOV     R5,#0x17
   \   00007A   7A01         MOV     R2,#0x1
   \   00007C   7B00         MOV     R3,#0x0
   \   00007E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   ??osal_start_timerEx?relay
   \   000086   8091         SJMP    ??SampleApp_ProcessEvent_3
    262              }
    263          
    264              // return unprocessed events
    265              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   000088   EE           MOV     A,R6
   \   000089   FA           MOV     R2,A
   \   00008A   EF           MOV     A,R7
   \   00008B   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_9:
   \   00008D   FB           MOV     R3,A
   \   00008E   8027         SJMP    ??SampleApp_ProcessEvent_10
    266            }
    267          
    268            // Send a message out - This event is generated by a timer
    269            //  (setup in SampleApp_Init()).
    270            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000090   EE           MOV     A,R6
   \   000091   A2E0         MOV     C,0xE0 /* A   */.0
   \   000093   501E         JNC     ??SampleApp_ProcessEvent_11
    271            {
    272              // Send the periodic message
    273              //SampleApp_SendPeriodicMessage();
    274              SampleApp_Send_P2P_Message();
    275          
    276              // Setup to send message again in normal period (+ a little jitter)  
    277              //设置在正常时间内再次发送消息
    278                 osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    279                     (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000095                ; Setup parameters for call to function osal_rand
   \   000095   12....       LCALL   ??osal_rand?relay
   \   000098                ; Setup parameters for call to function osal_start_timerEx
   \   000098   EA           MOV     A,R2
   \   000099   2470         ADD     A,#0x70
   \   00009B   FC           MOV     R4,A
   \   00009C   E4           CLR     A
   \   00009D   3417         ADDC    A,#0x17
   \   00009F   FD           MOV     R5,A
   \   0000A0   7A01         MOV     R2,#0x1
   \   0000A2   7B00         MOV     R3,#0x0
   \   0000A4   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   12....       LCALL   ??osal_start_timerEx?relay
    280              // return unprocessed events
    281              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000AC   EE           MOV     A,R6
   \   0000AD   6401         XRL     A,#0x1
   \   0000AF   FA           MOV     R2,A
   \   0000B0   EF           MOV     A,R7
   \   0000B1   80DA         SJMP    ??SampleApp_ProcessEvent_9
    282            }
    283          
    284            // Discard unknown events
    285            return 0;
   \                     ??SampleApp_ProcessEvent_11:
   \   0000B3   7A00         MOV     R2,#0x0
   \   0000B5   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000B7                REQUIRE ?Subroutine0
   \   0000B7                ; // Fall through to label ?Subroutine0
    286          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    287          
    288          /*********************************************************************
    289           * Event Generation Functions
    290           */
    291          /*********************************************************************
    292           * @fn      SampleApp_HandleKeys
    293           *
    294           * @brief   Handles all key events for this device.
    295           *
    296           * @param   shift - true if in shift/alt.
    297           * @param   keys - bit field for key events. Valid entries:
    298           *                 HAL_KEY_SW_2
    299           *                 HAL_KEY_SW_1
    300           *
    301           * @return  none
    302           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    303          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    304          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    305            (void)shift;  // Intentionally unreferenced parameter
    306            
    307            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    308            {
    309              /* This key sends the Flash Command is sent to Group 1.
    310               * This device will not receive the Flash Command from this
    311               * device (even if it belongs to group 1).
    312               */
    313              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    314            }
    315          
    316            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    317            {
    318              /* The Flashr Command is sent to Group 1.
    319               * This key toggles this device in and out of group 1.
    320               * If this device doesn't belong to group 1, this application
    321               * will not receive the Flash command sent to group 1.
    322               */
    323              aps_Group_t *grp;
    324              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    325              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    326              {
    327                // Remove from the group
    328                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    329              }
    330              else
    331              {
    332                // Add to the flash group
    333                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    334              }
    335            }
    336          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine2_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    337          
    338          /*********************************************************************
    339           * LOCAL FUNCTIONS
    340           */
    341          
    342          /*********************************************************************
    343           * @fn      SampleApp_MessageMSGCB
    344           *
    345           * @brief   Data message processor callback.  This function processes
    346           *          any incoming data - probably from other devices.  So, based
    347           *          on cluster ID, perform the intended action.
    348           *
    349           * @param   none
    350           *
    351           * @return  none
    352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    354          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    355            uint16 flashTime;
    356            
    357            switch ( pkt->clusterId )
   \   000009   EE           MOV     A,R6
   \   00000A   2421         ADD     A,#0x21
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 3,A
   \   000022   78..         MOV     R0,#?V0 + 2
   \   000024   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000027   0200         DW        2
   \   000029   02           DB        2
   \   00002A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00002E   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000030   ....         DW        ??SampleApp_MessageMSGCB_2
    358            {
    359              case SAMPLEAPP_P2P_CLUSTERID:
    360                if(sendSign)
   \                     ??SampleApp_MessageMSGCB_2:
   \   000032   90....       MOV     DPTR,#sendSign
   \   000035   E0           MOVX    A,@DPTR
   \   000036   606B         JZ      ??SampleApp_MessageMSGCB_0
    361                {
    362                  sendSign = 0;
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    363                  HalUARTWrite(0, "ZIB:", 4);       //提示接收到数据
   \   00003A                ; Setup parameters for call to function HalUARTWrite
   \   00003A   7C04         MOV     R4,#0x4
   \   00003C   FD           MOV     R5,A
   \   00003D   7A..         MOV     R2,#`?<Constant "ZIB:">` & 0xff
   \   00003F   7B..         MOV     R3,#(`?<Constant "ZIB:">` >> 8) & 0xff
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??HalUARTWrite?relay
    364                  HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //输出接收到的数据
   \   000045                ; Setup parameters for call to function HalUARTWrite
   \   000045   EE           MOV     A,R6
   \   000046   241F         ADD     A,#0x1f
   \   000048   F582         MOV     DPL,A
   \   00004A   EF           MOV     A,R7
   \   00004B   3400         ADDC    A,#0x0
   \   00004D   F583         MOV     DPH,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FC           MOV     R4,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FD           MOV     R5,A
   \   000054   85..82       MOV     DPL,?V0 + 0
   \   000057   85..83       MOV     DPH,?V0 + 1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FA           MOV     R2,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FB           MOV     R3,A
   \   00005F   7900         MOV     R1,#0x0
   \   000061   12....       LCALL   ??HalUARTWrite?relay
    365                  sendSign = 1;
   \   000064   90....       MOV     DPTR,#sendSign
   \   000067   7401         MOV     A,#0x1
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   8037         SJMP    ??SampleApp_MessageMSGCB_0
    366                }
    367                break; 
    368              case SAMPLEAPP_PERIODIC_CLUSTERID:
    369                break;
    370          
    371              case SAMPLEAPP_FLASH_CLUSTERID:
    372                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    373                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   00006C   85..82       MOV     DPL,?V0 + 0
   \   00006F   85..83       MOV     DPH,?V0 + 1
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F8           MOV     R0,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F9           MOV     R1,A
   \   000077                ; Setup parameters for call to function HalLedBlink
   \   000077   8882         MOV     DPL,R0
   \   000079   8983         MOV     DPH,R1
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FA           MOV     R2,A
   \   00007E   8882         MOV     DPL,R0
   \   000080   8983         MOV     DPH,R1
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   EA           MOV     A,R2
   \   000087   2400         ADD     A,#0x0
   \   000089   F5..         MOV     ?V0 + 0,A
   \   00008B   E4           CLR     A
   \   00008C   39           ADDC    A,R1
   \   00008D   F5..         MOV     ?V0 + 1,A
   \   00008F   7402         MOV     A,#0x2
   \   000091   78..         MOV     R0,#?V0 + 0
   \   000093   12....       LCALL   ?US_SHR
   \   000096   AC..         MOV     R4,?V0 + 0
   \   000098   AD..         MOV     R5,?V0 + 1
   \   00009A   7B32         MOV     R3,#0x32
   \   00009C   7A04         MOV     R2,#0x4
   \   00009E   7908         MOV     R1,#0x8
   \   0000A0   12....       LCALL   ??HalLedBlink?relay
    374                break;
    375            }
    376          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000A3   02....       LJMP    ?Subroutine0 & 0xFFFF
    377          
    378          /*********************************************************************
    379           * @fn      SampleApp_SendPeriodicMessage
    380           *
    381           * @brief   Send the periodic message.
    382           *
    383           * @param   none
    384           *
    385           * @return  none
    386           * 定时发送函数  终端发送给协调器
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    389          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    390            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    391                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    392                                 1,
    393                                 (uint8*)&SampleAppPeriodicCounter,
    394                                 &SampleApp_TransID,
    395                                 AF_DISCV_ROUTE,
    396                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042                REQUIRE ?Subroutine1
   \   000042                ; // Fall through to label ?Subroutine1
    397            {
    398            }
    399            else
    400            {
    401              // Error occurred in request to send.
    402            }
    403          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine2_0
   \   000003                ; // Fall through to label ??Subroutine2_0
    404          
    405          /*********************************************************************
    406           * @fn      SampleApp_SendFlashMessage
    407           *
    408           * @brief   Send the flash message to group 1.
    409           *
    410           * @param   flashTime - in milliseconds
    411           *
    412           * @return  none
    413           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    414          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    415          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    416            uint8 buffer[3];
    417            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    418            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    419            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    420          
    421            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    422                                 SAMPLEAPP_FLASH_CLUSTERID,
    423                                 3,
    424                                 buffer,
    425                                 &SampleApp_TransID,
    426                                 AF_DISCV_ROUTE,
    427                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    428            {
    429            }
    430            else
    431            {
    432              // Error occurred in request to send.
    433            }
    434          }
   \   000071   7403         MOV     A,#0x3
   \   000073   80..         SJMP    ?Subroutine1
    435          
    436          /*********************************************************************
    437           * @fn      SampleApp_Send_P2P_Message
    438           *
    439           * @brief   point to point.
    440           *
    441           * @param   none
    442           *
    443           * @return  none
    444           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    445          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    446          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    447            /*
    448            byte  temp[3], humidity[3], strTemp[8],guangzhao[8]={0};
    449            byte date[10]={0};
    450            //ds18b20
    451            byte str[6];
    452            //char strTemp2[10];
    453            byte temp2;
    454            
    455            
    456            uint32 w;
    457            w = (uint32)get_light()/1.2;  
    458            guangzhao[7]='\0';
    459            guangzhao[6]='\n';
    460            guangzhao[5]=(uint)w/100000 +0x30;
    461            w=w%100000; 
    462            guangzhao[4]=(uint)w/10000 +0x30;
    463            w=w%10000; 
    464            guangzhao[3]=(uint)w/1000 +0x30;
    465            w=w%1000;  
    466            guangzhao[2]=(uint)w/100 +0x30;
    467            w=w%100;    
    468            guangzhao[1]=(uint)w/10 +0x30;
    469            w=w%10;      
    470            guangzhao[0]=(uint)w +0x30;
    471           
    472            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    473                                 SAMPLEAPP_P2P_CLUSTERID,
    474                                 8,
    475                                 guangzhao,
    476                                 &SampleApp_TransID,
    477                                 AF_DISCV_ROUTE,
    478                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    479            {
    480            }
    481            else
    482            {
    483              // Error occurred in request to send.
    484            }
    485            
    486             DHT11();             //获取温湿度
    487          
    488            //将温湿度的转换成字符串,供LCD显示  
    489            temp[0] = wendu_shi+0x30;
    490            temp[1] = wendu_ge+0x30;
    491            temp[2] = '\0';
    492            
    493            humidity[0] = shidu_shi+0x30;
    494            humidity[1] = shidu_ge+0x30;
    495            humidity[2] = '\n';
    496            //将数据整合后方便发给协调器显示
    497            osal_memcpy(strTemp, temp, 2); 
    498            osal_memcpy(&strTemp[2], "@", 1);
    499            osal_memcpy(&strTemp[3], humidity, 2);
    500            strTemp[6]='\n';
    501            strTemp[7]='\0';
    502            
    503            
    504            temp2 = ReadDs18B20();                //读取温度数据
    505            str[0] = temp2/10+48;
    506            str[1] = temp2%10+48;
    507            str[2] = ' ';
    508            str[3] = 'C';
    509            str[4] = '\n';   
    510            str[5] = '\0'; 
    511            
    512            osal_memcpy(date, temp, 2); //DH11温度
    513            osal_memcpy(&date[2], "@", 1);
    514            osal_memcpy(&date[3], humidity, 2);
    515            osal_memcpy(&date[5], "@", 1);
    516            osal_memcpy(&date[6], str, 2);
    517            date[8]='\n';
    518            date[9]='\0';
    519            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    520                                 SAMPLEAPP_P2P_CLUSTERID,
    521                                 10,
    522                                 date,
    523                                 &SampleApp_TransID,
    524                                 AF_DISCV_ROUTE,
    525                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    526            {
    527            }
    528            else
    529            {
    530              // Error occurred in request to send.
    531            }
    532            */
    533          }
   \   000000   02....       LJMP    ?BRET
    534          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    535          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg)
   \                     SampleApp_SerialCMD:
    536          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    537                 //数据长度()+地址()+指令()+数据()
    538          	uint8 i,len,*str=NULL;     //len有用数据长度
    539          	str=cmdMsg->msg;          //指向数据开头
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FE           MOV     R6,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FF           MOV     R7,A
    540          	len=*str;                //msg里的第1个字节代表后面的数据长度
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 3,A
    541          	/********打印出串口接收到的数据，用于提示*********/
    542          	for(i=1;i<=len;i++)
   \   000017   75..01       MOV     ?V0 + 2,#0x1
   \   00001A   8012         SJMP    ??SampleApp_SerialCMD_0
    543          		HalUARTWrite(0,(str+i),1 );
   \                     ??SampleApp_SerialCMD_1:
   \   00001C                ; Setup parameters for call to function HalUARTWrite
   \   00001C   85....       MOV     ?V0 + 0,?V0 + 2
   \   00001F   EE           MOV     A,R6
   \   000020   25..         ADD     A,?V0 + 0
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   3400         ADDC    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   7900         MOV     R1,#0x0
   \   000029   12....       LCALL   ??HalUARTWrite?relay
   \   00002C   05..         INC     ?V0 + 2
   \                     ??SampleApp_SerialCMD_0:
   \   00002E   E5..         MOV     A,?V0 + 3
   \   000030   C3           CLR     C
   \   000031   95..         SUBB    A,?V0 + 2
   \   000033   7C01         MOV     R4,#0x1
   \   000035   7D00         MOV     R5,#0x0
   \   000037   50E3         JNC     ??SampleApp_SerialCMD_1
    544          	HalUARTWrite(0,"\n",1 );//换行  
   \   000039                ; Setup parameters for call to function HalUARTWrite
   \   000039   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00003B   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   12....       LCALL   ??HalUARTWrite?relay
    545          	/*******发送出去，同无线数据传输*****
    546          	if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    547                                        SAMPLEAPP_COM_CONTROLID,//自己定义一个控制ID
    548                                        len+1,                // 数据长度         
    549                                        str,                     //数据内容
    550                                        &SampleApp_TransID, 
    551                                        AF_DISCV_ROUTE,
    552                                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    553          	{
    554          	}
    555          	else
    556          	{
    557          	// Error occurred in request to send.
    558          	} 
    559                  ***/
    560          }
   \   000042   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sendSign>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SerialCMD?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SerialCMD

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZIB:">`:
   \   000000   5A49423A     DB "ZIB:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"
    561          
    562          
    563          /*********************************************************************
    564          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalLedBlink                   0      0     24
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> SampleApp_SerialCMD           0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_P2P_Message         0      0      0
     SampleApp_SerialCMD                0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalUARTWrite                  0      0     24


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     P0SEL                                    1
     sendSign                                 1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         188
     SampleApp_ProcessEvent                 183
     ?Subroutine0                             5
     SampleApp_HandleKeys                    62
     ??Subroutine2_0                          5
     SampleApp_MessageMSGCB                 166
     SampleApp_SendPeriodicMessage           66
     ?Subroutine1                             3
     SampleApp_SendFlashMessage             117
     SampleApp_Send_P2P_Message               3
     SampleApp_SerialCMD                     69
     ?<Initializer for sendSign>              1
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ??SampleApp_SerialCMD?relay              6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "ZIB:">                       5
     ?<Constant "\n">                         2

 
 867 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
  41 bytes in segment XDATA_ROM_C
  65 bytes in segment XDATA_Z
 
 916 bytes of CODE  memory
  41 bytes of CONST memory
   0 bytes of DATA  memory (+ 1 byte shared)
  66 bytes of XDATA memory

Errors: none
Warnings: none
